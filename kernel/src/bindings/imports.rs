/* automatically generated by rust-bindgen 0.71.1 */

pub const UID_ROOT: i32 = 0;
pub const GID_WHEEL: i32 = 0;
pub const D_VERSION: i32 = 1548272467;
pub const MAKEDEV_WAITOK: i32 = 8;
pub const MAKEDEV_CHECKNAME: i32 = 32;
pub const M_WAITOK: i32 = 2;
pub type __uint16_t = libc::c_ushort;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __vm_size_t = __uint64_t;
pub type __time_t = __int64_t;
pub type __vm_paddr_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __mode_t = __uint16_t;
pub type __off_t = __int64_t;
pub type __uid_t = __uint32_t;
pub type u_char = libc::c_uchar;
pub type u_int = libc::c_uint;
pub type u_long = libc::c_ulong;
pub type caddr_t = *mut libc::c_char;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type off_t = __off_t;
pub type time_t = __time_t;
pub type uid_t = __uid_t;
pub type vm_ooffset_t = __uint64_t;
pub type vm_paddr_t = __vm_paddr_t;
pub type vm_size_t = __vm_size_t;
pub type vm_memattr_t = libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module {
    _unused: [u8; 0],
}
pub type module_t = *mut module;
pub type modeventhand_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: module_t, arg2: libc::c_int, arg3: *mut libc::c_void) -> libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct moduledata {
    pub name: *const libc::c_char,
    pub evhand: modeventhand_t,
    pub priv_: *mut libc::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of moduledata"][::core::mem::size_of::<moduledata>() - 24usize];
    ["Alignment of moduledata"][::core::mem::align_of::<moduledata>() - 8usize];
    ["Offset of field: moduledata::name"][::core::mem::offset_of!(moduledata, name) - 0usize];
    ["Offset of field: moduledata::evhand"][::core::mem::offset_of!(moduledata, evhand) - 8usize];
    ["Offset of field: moduledata::priv_"][::core::mem::offset_of!(moduledata, priv_) - 16usize];
};
pub type moduledata_t = moduledata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn uprintf(arg1: *const libc::c_char, ...) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snapdata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cdev {
    pub si_spare0: *mut libc::c_void,
    pub si_flags: u_int,
    pub si_atime: timespec,
    pub si_ctime: timespec,
    pub si_mtime: timespec,
    pub si_uid: uid_t,
    pub si_gid: gid_t,
    pub si_mode: mode_t,
    pub si_cred: *mut ucred,
    pub si_drv0: libc::c_int,
    pub si_refcount: libc::c_int,
    pub si_list: cdev__bindgen_ty_1,
    pub si_clone: cdev__bindgen_ty_2,
    pub si_children: cdev__bindgen_ty_3,
    pub si_siblings: cdev__bindgen_ty_4,
    pub si_parent: *mut cdev,
    pub si_mountpt: *mut mount,
    pub si_drv1: *mut libc::c_void,
    pub si_drv2: *mut libc::c_void,
    pub si_devsw: *mut cdevsw,
    pub si_iosize_max: libc::c_int,
    pub si_usecount: u_long,
    pub si_threadcount: u_long,
    pub __si_u: cdev__bindgen_ty_5,
    pub si_name: [libc::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdev__bindgen_ty_1 {
    pub le_next: *mut cdev,
    pub le_prev: *mut *mut cdev,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev__bindgen_ty_1"][::core::mem::size_of::<cdev__bindgen_ty_1>() - 16usize];
    ["Alignment of cdev__bindgen_ty_1"][::core::mem::align_of::<cdev__bindgen_ty_1>() - 8usize];
    ["Offset of field: cdev__bindgen_ty_1::le_next"]
        [::core::mem::offset_of!(cdev__bindgen_ty_1, le_next) - 0usize];
    ["Offset of field: cdev__bindgen_ty_1::le_prev"]
        [::core::mem::offset_of!(cdev__bindgen_ty_1, le_prev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdev__bindgen_ty_2 {
    pub le_next: *mut cdev,
    pub le_prev: *mut *mut cdev,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev__bindgen_ty_2"][::core::mem::size_of::<cdev__bindgen_ty_2>() - 16usize];
    ["Alignment of cdev__bindgen_ty_2"][::core::mem::align_of::<cdev__bindgen_ty_2>() - 8usize];
    ["Offset of field: cdev__bindgen_ty_2::le_next"]
        [::core::mem::offset_of!(cdev__bindgen_ty_2, le_next) - 0usize];
    ["Offset of field: cdev__bindgen_ty_2::le_prev"]
        [::core::mem::offset_of!(cdev__bindgen_ty_2, le_prev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdev__bindgen_ty_3 {
    pub lh_first: *mut cdev,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev__bindgen_ty_3"][::core::mem::size_of::<cdev__bindgen_ty_3>() - 8usize];
    ["Alignment of cdev__bindgen_ty_3"][::core::mem::align_of::<cdev__bindgen_ty_3>() - 8usize];
    ["Offset of field: cdev__bindgen_ty_3::lh_first"]
        [::core::mem::offset_of!(cdev__bindgen_ty_3, lh_first) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdev__bindgen_ty_4 {
    pub le_next: *mut cdev,
    pub le_prev: *mut *mut cdev,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev__bindgen_ty_4"][::core::mem::size_of::<cdev__bindgen_ty_4>() - 16usize];
    ["Alignment of cdev__bindgen_ty_4"][::core::mem::align_of::<cdev__bindgen_ty_4>() - 8usize];
    ["Offset of field: cdev__bindgen_ty_4::le_next"]
        [::core::mem::offset_of!(cdev__bindgen_ty_4, le_next) - 0usize];
    ["Offset of field: cdev__bindgen_ty_4::le_prev"]
        [::core::mem::offset_of!(cdev__bindgen_ty_4, le_prev) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cdev__bindgen_ty_5 {
    pub __sid_snapdata: *mut snapdata,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev__bindgen_ty_5"][::core::mem::size_of::<cdev__bindgen_ty_5>() - 8usize];
    ["Alignment of cdev__bindgen_ty_5"][::core::mem::align_of::<cdev__bindgen_ty_5>() - 8usize];
    ["Offset of field: cdev__bindgen_ty_5::__sid_snapdata"]
        [::core::mem::offset_of!(cdev__bindgen_ty_5, __sid_snapdata) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev"][::core::mem::size_of::<cdev>() - 480usize];
    ["Alignment of cdev"][::core::mem::align_of::<cdev>() - 8usize];
    ["Offset of field: cdev::si_spare0"][::core::mem::offset_of!(cdev, si_spare0) - 0usize];
    ["Offset of field: cdev::si_flags"][::core::mem::offset_of!(cdev, si_flags) - 8usize];
    ["Offset of field: cdev::si_atime"][::core::mem::offset_of!(cdev, si_atime) - 16usize];
    ["Offset of field: cdev::si_ctime"][::core::mem::offset_of!(cdev, si_ctime) - 32usize];
    ["Offset of field: cdev::si_mtime"][::core::mem::offset_of!(cdev, si_mtime) - 48usize];
    ["Offset of field: cdev::si_uid"][::core::mem::offset_of!(cdev, si_uid) - 64usize];
    ["Offset of field: cdev::si_gid"][::core::mem::offset_of!(cdev, si_gid) - 68usize];
    ["Offset of field: cdev::si_mode"][::core::mem::offset_of!(cdev, si_mode) - 72usize];
    ["Offset of field: cdev::si_cred"][::core::mem::offset_of!(cdev, si_cred) - 80usize];
    ["Offset of field: cdev::si_drv0"][::core::mem::offset_of!(cdev, si_drv0) - 88usize];
    ["Offset of field: cdev::si_refcount"][::core::mem::offset_of!(cdev, si_refcount) - 92usize];
    ["Offset of field: cdev::si_list"][::core::mem::offset_of!(cdev, si_list) - 96usize];
    ["Offset of field: cdev::si_clone"][::core::mem::offset_of!(cdev, si_clone) - 112usize];
    ["Offset of field: cdev::si_children"][::core::mem::offset_of!(cdev, si_children) - 128usize];
    ["Offset of field: cdev::si_siblings"][::core::mem::offset_of!(cdev, si_siblings) - 136usize];
    ["Offset of field: cdev::si_parent"][::core::mem::offset_of!(cdev, si_parent) - 152usize];
    ["Offset of field: cdev::si_mountpt"][::core::mem::offset_of!(cdev, si_mountpt) - 160usize];
    ["Offset of field: cdev::si_drv1"][::core::mem::offset_of!(cdev, si_drv1) - 168usize];
    ["Offset of field: cdev::si_drv2"][::core::mem::offset_of!(cdev, si_drv2) - 176usize];
    ["Offset of field: cdev::si_devsw"][::core::mem::offset_of!(cdev, si_devsw) - 184usize];
    ["Offset of field: cdev::si_iosize_max"]
        [::core::mem::offset_of!(cdev, si_iosize_max) - 192usize];
    ["Offset of field: cdev::si_usecount"][::core::mem::offset_of!(cdev, si_usecount) - 200usize];
    ["Offset of field: cdev::si_threadcount"]
        [::core::mem::offset_of!(cdev, si_threadcount) - 208usize];
    ["Offset of field: cdev::__si_u"][::core::mem::offset_of!(cdev, __si_u) - 216usize];
    ["Offset of field: cdev::si_name"][::core::mem::offset_of!(cdev, si_name) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_object {
    _unused: [u8; 0],
}
pub type d_open_t = ::core::option::Option<
    unsafe extern "C" fn(
        dev: *mut cdev,
        oflags: libc::c_int,
        devtype: libc::c_int,
        td: *mut thread,
    ) -> libc::c_int,
>;
pub type d_fdopen_t = ::core::option::Option<
    unsafe extern "C" fn(
        dev: *mut cdev,
        oflags: libc::c_int,
        td: *mut thread,
        fp: *mut file,
    ) -> libc::c_int,
>;
pub type d_close_t = ::core::option::Option<
    unsafe extern "C" fn(
        dev: *mut cdev,
        fflag: libc::c_int,
        devtype: libc::c_int,
        td: *mut thread,
    ) -> libc::c_int,
>;
pub type d_strategy_t = ::core::option::Option<unsafe extern "C" fn(bp: *mut bio)>;
pub type d_ioctl_t = ::core::option::Option<
    unsafe extern "C" fn(
        dev: *mut cdev,
        cmd: u_long,
        data: caddr_t,
        fflag: libc::c_int,
        td: *mut thread,
    ) -> libc::c_int,
>;
pub type d_read_t = ::core::option::Option<
    unsafe extern "C" fn(dev: *mut cdev, uio: *mut uio, ioflag: libc::c_int) -> libc::c_int,
>;
pub type d_write_t = ::core::option::Option<
    unsafe extern "C" fn(dev: *mut cdev, uio: *mut uio, ioflag: libc::c_int) -> libc::c_int,
>;
pub type d_poll_t = ::core::option::Option<
    unsafe extern "C" fn(dev: *mut cdev, events: libc::c_int, td: *mut thread) -> libc::c_int,
>;
pub type d_kqfilter_t =
    ::core::option::Option<unsafe extern "C" fn(dev: *mut cdev, kn: *mut knote) -> libc::c_int>;
pub type d_mmap_t = ::core::option::Option<
    unsafe extern "C" fn(
        dev: *mut cdev,
        offset: vm_ooffset_t,
        paddr: *mut vm_paddr_t,
        nprot: libc::c_int,
        memattr: *mut vm_memattr_t,
    ) -> libc::c_int,
>;
pub type d_mmap_single_t = ::core::option::Option<
    unsafe extern "C" fn(
        cdev: *mut cdev,
        offset: *mut vm_ooffset_t,
        size: vm_size_t,
        object: *mut *mut vm_object,
        nprot: libc::c_int,
    ) -> libc::c_int,
>;
pub type d_purge_t = ::core::option::Option<unsafe extern "C" fn(dev: *mut cdev)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cdevsw {
    pub d_version: libc::c_int,
    pub d_flags: u_int,
    pub d_name: *const libc::c_char,
    pub d_open: d_open_t,
    pub d_fdopen: d_fdopen_t,
    pub d_close: d_close_t,
    pub d_read: d_read_t,
    pub d_write: d_write_t,
    pub d_ioctl: d_ioctl_t,
    pub d_poll: d_poll_t,
    pub d_mmap: d_mmap_t,
    pub d_strategy: d_strategy_t,
    pub d_spare0: *mut libc::c_void,
    pub d_kqfilter: d_kqfilter_t,
    pub d_purge: d_purge_t,
    pub d_mmap_single: d_mmap_single_t,
    pub d_spare1: [i32; 3usize],
    pub d_spare2: [*mut libc::c_void; 3usize],
    pub d_devs: cdevsw__bindgen_ty_1,
    pub d_spare3: libc::c_int,
    pub __d_giant: cdevsw__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdevsw__bindgen_ty_1 {
    pub lh_first: *mut cdev,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdevsw__bindgen_ty_1"][::core::mem::size_of::<cdevsw__bindgen_ty_1>() - 8usize];
    ["Alignment of cdevsw__bindgen_ty_1"][::core::mem::align_of::<cdevsw__bindgen_ty_1>() - 8usize];
    ["Offset of field: cdevsw__bindgen_ty_1::lh_first"]
        [::core::mem::offset_of!(cdevsw__bindgen_ty_1, lh_first) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cdevsw__bindgen_ty_2 {
    pub gianttrick: *mut cdevsw,
    pub postfree_list: cdevsw__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdevsw__bindgen_ty_2__bindgen_ty_1 {
    pub sle_next: *mut cdevsw,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdevsw__bindgen_ty_2__bindgen_ty_1"]
        [::core::mem::size_of::<cdevsw__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of cdevsw__bindgen_ty_2__bindgen_ty_1"]
        [::core::mem::align_of::<cdevsw__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: cdevsw__bindgen_ty_2__bindgen_ty_1::sle_next"]
        [::core::mem::offset_of!(cdevsw__bindgen_ty_2__bindgen_ty_1, sle_next) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdevsw__bindgen_ty_2"][::core::mem::size_of::<cdevsw__bindgen_ty_2>() - 8usize];
    ["Alignment of cdevsw__bindgen_ty_2"][::core::mem::align_of::<cdevsw__bindgen_ty_2>() - 8usize];
    ["Offset of field: cdevsw__bindgen_ty_2::gianttrick"]
        [::core::mem::offset_of!(cdevsw__bindgen_ty_2, gianttrick) - 0usize];
    ["Offset of field: cdevsw__bindgen_ty_2::postfree_list"]
        [::core::mem::offset_of!(cdevsw__bindgen_ty_2, postfree_list) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdevsw"][::core::mem::size_of::<cdevsw>() - 184usize];
    ["Alignment of cdevsw"][::core::mem::align_of::<cdevsw>() - 8usize];
    ["Offset of field: cdevsw::d_version"][::core::mem::offset_of!(cdevsw, d_version) - 0usize];
    ["Offset of field: cdevsw::d_flags"][::core::mem::offset_of!(cdevsw, d_flags) - 4usize];
    ["Offset of field: cdevsw::d_name"][::core::mem::offset_of!(cdevsw, d_name) - 8usize];
    ["Offset of field: cdevsw::d_open"][::core::mem::offset_of!(cdevsw, d_open) - 16usize];
    ["Offset of field: cdevsw::d_fdopen"][::core::mem::offset_of!(cdevsw, d_fdopen) - 24usize];
    ["Offset of field: cdevsw::d_close"][::core::mem::offset_of!(cdevsw, d_close) - 32usize];
    ["Offset of field: cdevsw::d_read"][::core::mem::offset_of!(cdevsw, d_read) - 40usize];
    ["Offset of field: cdevsw::d_write"][::core::mem::offset_of!(cdevsw, d_write) - 48usize];
    ["Offset of field: cdevsw::d_ioctl"][::core::mem::offset_of!(cdevsw, d_ioctl) - 56usize];
    ["Offset of field: cdevsw::d_poll"][::core::mem::offset_of!(cdevsw, d_poll) - 64usize];
    ["Offset of field: cdevsw::d_mmap"][::core::mem::offset_of!(cdevsw, d_mmap) - 72usize];
    ["Offset of field: cdevsw::d_strategy"][::core::mem::offset_of!(cdevsw, d_strategy) - 80usize];
    ["Offset of field: cdevsw::d_spare0"][::core::mem::offset_of!(cdevsw, d_spare0) - 88usize];
    ["Offset of field: cdevsw::d_kqfilter"][::core::mem::offset_of!(cdevsw, d_kqfilter) - 96usize];
    ["Offset of field: cdevsw::d_purge"][::core::mem::offset_of!(cdevsw, d_purge) - 104usize];
    ["Offset of field: cdevsw::d_mmap_single"]
        [::core::mem::offset_of!(cdevsw, d_mmap_single) - 112usize];
    ["Offset of field: cdevsw::d_spare1"][::core::mem::offset_of!(cdevsw, d_spare1) - 120usize];
    ["Offset of field: cdevsw::d_spare2"][::core::mem::offset_of!(cdevsw, d_spare2) - 136usize];
    ["Offset of field: cdevsw::d_devs"][::core::mem::offset_of!(cdevsw, d_devs) - 160usize];
    ["Offset of field: cdevsw::d_spare3"][::core::mem::offset_of!(cdevsw, d_spare3) - 168usize];
    ["Offset of field: cdevsw::__d_giant"][::core::mem::offset_of!(cdevsw, __d_giant) - 176usize];
};
unsafe extern "C" {
    pub fn destroy_dev(_dev: *mut cdev);
}
unsafe extern "C" {
    pub fn dev_ref(dev: *mut cdev);
}
unsafe extern "C" {
    pub fn dev_rel(dev: *mut cdev);
}
unsafe extern "C" {
    pub fn make_dev_p(
        _flags: libc::c_int,
        _cdev: *mut *mut cdev,
        _devsw: *mut cdevsw,
        _cr: *mut ucred,
        _uid: uid_t,
        _gid: gid_t,
        _mode: libc::c_int,
        _fmt: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut libc::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::core::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::core::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::core::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::core::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub const uio_rw_UIO_READ: uio_rw = 0;
pub const uio_rw_UIO_WRITE: uio_rw = 1;
pub type uio_rw = libc::c_uint;
pub const uio_seg_UIO_USERSPACE: uio_seg = 0;
pub const uio_seg_UIO_SYSSPACE: uio_seg = 1;
pub const uio_seg_UIO_NOCOPY: uio_seg = 2;
pub type uio_seg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uio {
    pub uio_iov: *mut iovec,
    pub uio_iovcnt: libc::c_int,
    pub uio_offset: off_t,
    pub uio_resid: isize,
    pub uio_segflg: uio_seg,
    pub uio_rw: uio_rw,
    pub uio_td: *mut thread,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uio"][::core::mem::size_of::<uio>() - 48usize];
    ["Alignment of uio"][::core::mem::align_of::<uio>() - 8usize];
    ["Offset of field: uio::uio_iov"][::core::mem::offset_of!(uio, uio_iov) - 0usize];
    ["Offset of field: uio::uio_iovcnt"][::core::mem::offset_of!(uio, uio_iovcnt) - 8usize];
    ["Offset of field: uio::uio_offset"][::core::mem::offset_of!(uio, uio_offset) - 16usize];
    ["Offset of field: uio::uio_resid"][::core::mem::offset_of!(uio, uio_resid) - 24usize];
    ["Offset of field: uio::uio_segflg"][::core::mem::offset_of!(uio, uio_segflg) - 32usize];
    ["Offset of field: uio::uio_rw"][::core::mem::offset_of!(uio, uio_rw) - 36usize];
    ["Offset of field: uio::uio_td"][::core::mem::offset_of!(uio, uio_td) - 40usize];
};
unsafe extern "C" {
    pub fn uiomove(cp: *mut libc::c_void, n: libc::c_int, uio: *mut uio) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_type_stats {
    pub mts_memalloced: u64,
    pub mts_memfreed: u64,
    pub mts_numallocs: u64,
    pub mts_numfrees: u64,
    pub mts_size: u64,
    pub _mts_reserved1: u64,
    pub _mts_reserved2: u64,
    pub _mts_reserved3: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of malloc_type_stats"][::core::mem::size_of::<malloc_type_stats>() - 64usize];
    ["Alignment of malloc_type_stats"][::core::mem::align_of::<malloc_type_stats>() - 8usize];
    ["Offset of field: malloc_type_stats::mts_memalloced"]
        [::core::mem::offset_of!(malloc_type_stats, mts_memalloced) - 0usize];
    ["Offset of field: malloc_type_stats::mts_memfreed"]
        [::core::mem::offset_of!(malloc_type_stats, mts_memfreed) - 8usize];
    ["Offset of field: malloc_type_stats::mts_numallocs"]
        [::core::mem::offset_of!(malloc_type_stats, mts_numallocs) - 16usize];
    ["Offset of field: malloc_type_stats::mts_numfrees"]
        [::core::mem::offset_of!(malloc_type_stats, mts_numfrees) - 24usize];
    ["Offset of field: malloc_type_stats::mts_size"]
        [::core::mem::offset_of!(malloc_type_stats, mts_size) - 32usize];
    ["Offset of field: malloc_type_stats::_mts_reserved1"]
        [::core::mem::offset_of!(malloc_type_stats, _mts_reserved1) - 40usize];
    ["Offset of field: malloc_type_stats::_mts_reserved2"]
        [::core::mem::offset_of!(malloc_type_stats, _mts_reserved2) - 48usize];
    ["Offset of field: malloc_type_stats::_mts_reserved3"]
        [::core::mem::offset_of!(malloc_type_stats, _mts_reserved3) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_type_internal {
    pub mti_probes: [u32; 2usize],
    pub mti_zone: u_char,
    pub mti_stats: *mut malloc_type_stats,
    pub mti_spare: [u_long; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of malloc_type_internal"][::core::mem::size_of::<malloc_type_internal>() - 88usize];
    ["Alignment of malloc_type_internal"][::core::mem::align_of::<malloc_type_internal>() - 8usize];
    ["Offset of field: malloc_type_internal::mti_probes"]
        [::core::mem::offset_of!(malloc_type_internal, mti_probes) - 0usize];
    ["Offset of field: malloc_type_internal::mti_zone"]
        [::core::mem::offset_of!(malloc_type_internal, mti_zone) - 8usize];
    ["Offset of field: malloc_type_internal::mti_stats"]
        [::core::mem::offset_of!(malloc_type_internal, mti_stats) - 16usize];
    ["Offset of field: malloc_type_internal::mti_spare"]
        [::core::mem::offset_of!(malloc_type_internal, mti_spare) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_type {
    pub ks_next: *mut malloc_type,
    pub ks_version: u_long,
    pub ks_shortdesc: *const libc::c_char,
    pub ks_mti: malloc_type_internal,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of malloc_type"][::core::mem::size_of::<malloc_type>() - 112usize];
    ["Alignment of malloc_type"][::core::mem::align_of::<malloc_type>() - 8usize];
    ["Offset of field: malloc_type::ks_next"]
        [::core::mem::offset_of!(malloc_type, ks_next) - 0usize];
    ["Offset of field: malloc_type::ks_version"]
        [::core::mem::offset_of!(malloc_type, ks_version) - 8usize];
    ["Offset of field: malloc_type::ks_shortdesc"]
        [::core::mem::offset_of!(malloc_type, ks_shortdesc) - 16usize];
    ["Offset of field: malloc_type::ks_mti"]
        [::core::mem::offset_of!(malloc_type, ks_mti) - 24usize];
};
unsafe extern "C" {
    pub static mut M_DEVBUF: [malloc_type; 1usize];
}
unsafe extern "C" {
    pub fn free(addr: *mut libc::c_void, type_: *mut malloc_type);
}
unsafe extern "C" {
    pub fn malloc(size: usize, type_: *mut malloc_type, flags: libc::c_int) -> *mut libc::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount {
    pub _address: u8,
}
