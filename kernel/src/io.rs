// Empty structure that uses libcore's `fmt::Write` trait to provide
// support for writing formatted arguments lists (as generated by the
// built-in `format_args!()` macro`)

use core::{fmt, ptr};
use libc::{c_char, c_void};
use crate::bindings::imports:: {
    malloc, free, uprintf, M_DEVBUF, M_WAITOK,
};

pub struct KernelDebugWriter {}

impl fmt::Write for KernelDebugWriter {
    fn write_str(&mut self, message: &str) -> fmt::Result {
        unsafe {
            let ptr = malloc(
                message.len() + 1,
                &mut M_DEVBUF[0],
                M_WAITOK,
            ) as *mut c_char;
            if ptr.is_null() {
                let msg =
                    cstr!("Failed to allocate memory for dynamic printf()\n");
                let ptr = msg.as_ptr() as *const c_char;
                uprintf(ptr);
            } else {
                ptr::copy(message.as_ptr(), ptr as *mut u8, message.len());
                ptr::write(ptr.add(message.len()), 0);
                uprintf(ptr);
                free(
                    ptr as *mut c_void,
                    &mut M_DEVBUF[0],
                );
            }
        }
        Ok(())
    }
}
